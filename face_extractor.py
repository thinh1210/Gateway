import os
import cv2
import face_recognition

class FaceExtractor:
    def __init__(self, dataset_path=r"C:\Users\Divu\Desktop\DADN\detect_face\dataset", output_dir="extracted_faces"):
        self.dataset_path = dataset_path
        self.output_dir = output_dir
        self.detection_method = "hog"  # C√≥ th·ªÉ ƒë·ªïi th√†nh "cnn" n·∫øu d√πng GPU

    def draw_rectangles(self, face_img):
        """V·∫Ω khung h√¨nh ch·ªØ nh·∫≠t quanh khu√¥n m·∫∑t tr√™n v√πng ƒë√£ c·∫Øt."""
        padding = 20  # S·ªë pixel m·ªü r·ªông m·ªói c·∫°nh
        top_padded = padding
        right_padded = face_img.shape[1] - padding
        bottom_padded = face_img.shape[0] - padding
        left_padded = padding
        cv2.rectangle(face_img, (left_padded, top_padded), (right_padded, bottom_padded), (0, 255, 0), 2)
        cv2.putText(face_img, "Face", (left_padded, top_padded - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
        return face_img

    def extract_faces(self):
        """C·∫Øt khu√¥n m·∫∑t t·ª´ ·∫£nh trong dataset v√† l∆∞u theo c·∫•u tr√∫c, gi·ªØ c·∫•u tr√∫c th∆∞ m·ª•c."""
        print(f"üöÄ B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t khu√¥n m·∫∑t t·ª´ dataset: {self.dataset_path}")
        
        # T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra n·∫øu ch∆∞a t·ªìn t·∫°i
        os.makedirs(self.output_dir, exist_ok=True)

        # L·∫•y danh s√°ch c√°c th∆∞ m·ª•c con (m·ªói th∆∞ m·ª•c l√† m·ªôt ng∆∞·ªùi/nh√£n)
        subdirs = [d for d in os.listdir(self.dataset_path) 
                  if os.path.isdir(os.path.join(self.dataset_path, d))]
        
        if not subdirs:
            print("‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c con n√†o trong dataset")
            return

        total_face_count = 0
        image_extensions = (".jpg", ".jpeg", ".png")

        for subdir in subdirs:
            input_subdir = os.path.join(self.dataset_path, subdir)
            output_subdir = os.path.join(self.output_dir, subdir)
            os.makedirs(output_subdir, exist_ok=True)
            
            print(f"üìÇ X·ª≠ l√Ω th∆∞ m·ª•c: {subdir}")
            
            # L·∫•y danh s√°ch ·∫£nh trong th∆∞ m·ª•c con
            image_paths = [os.path.join(input_subdir, f) for f in os.listdir(input_subdir) 
                          if f.lower().endswith(image_extensions)]
            
            face_count = 0
            for idx, image_path in enumerate(image_paths):
                print(f"üì∏ X·ª≠ l√Ω ·∫£nh {idx + 1}/{len(image_paths)}: {image_path}")
                
                image = cv2.imread(image_path)
                if image is None:
                    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {image_path}")
                    continue

                rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                face_locations = face_recognition.face_locations(rgb_image, model=self.detection_method)

                if not face_locations:
                    print(f"‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t trong: {image_path}")
                    continue

                for face_idx, (top, right, bottom, left) in enumerate(face_locations):
                    padding = 30
                    top = max(0, top - padding)
                    left = max(0, left - padding)
                    right = min(image.shape[1], right + padding)
                    bottom = min(image.shape[0], bottom + padding)

                    face_img = image[top:bottom, left:right]
                    
                    if face_img.size == 0:
                        print(f"‚ö†Ô∏è V√πng khu√¥n m·∫∑t kh√¥ng h·ª£p l·ªá trong: {image_path}")
                        continue

                    filename = f"face_{idx:05d}_{face_idx}.png"
                    filepath = os.path.join(output_subdir, filename)
                    cv2.imwrite(filepath, face_img)
                    print(f"‚úÖ ƒê√£ l∆∞u khu√¥n m·∫∑t: {filepath}")
                    face_count += 1

            print(f"‚úÖ Ho√†n t·∫•t th∆∞ m·ª•c {subdir}: {face_count} khu√¥n m·∫∑t")
            total_face_count += face_count

        print(f"‚úÖ Ho√†n t·∫•t to√†n b·ªô dataset! ƒê√£ l∆∞u {total_face_count} khu√¥n m·∫∑t v√†o {self.output_dir}")

if __name__ == "__main__":
    # Nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫øn dataset

    extractor = FaceExtractor( )
    extractor.extract_faces()